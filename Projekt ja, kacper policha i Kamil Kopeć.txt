temat: gra rpg
tytuł: Światła Mroku: Opowieść Zaklętego Królestwa

technologie:

Unity
C#
Blender
RPG z komputerem

skłąd zespołu:

Kamil - scenariusz, dokumentacja,tester
Kacper - Grafika,tester
Oskar - Kod,tester

Wymagania funkcjonalne:
- tworzenie postaci predefiniowanej 
- umieranie postaci
- odradzanie postaci
- teleportacja postaci/npc
- rozpoczencie gry
- zakończenie gry (good endning)  poprawne wykonanie wszystkich misji, zakończenie fabularne gry
- zakończenie gry (bad ending) zgon postacji (odrodzenie przy najbliższym punkcie kontrolnym)
- "rozmowa" z listy wybieranej z npc
- walka z npc?
- poruszanie się postacji
- stanie w miejscu postaci
- spadanie postaci
- skakanie postaci
- zapisanie progresji gracza?
- wczytanie progresji gry?
- autozapis?
- stwożenie/wyświetlenie menu gry
- zmiana głośności gry
-zmiana ustawień graf?

- wyświetlenie credits 
- umieszczenie easter eggs


Niefunkcjonalne:
- minimalne ustawienia systemowe:

  Windows 10 64 bit 
  karta graficzna zgodna z Dx11
  procesor x64
  Ram 16gb

To do:
- 1 mapa do świata
- postać główna 
- NPC
- przeciwnicy
- fabuła
- misja główna, misje poboczne
- poruszanie się
- interakcja
- menu główne (grafika)
- rozpoczencie gry
- zakończenia gry
- ustawienia 
- walka
- easter eggi
- teleportacja
- var char
- spawn point


schemat bazydanych:
Gracze

gracz ma ID, nick, poziom doświadczenia, punkty zdobyte w grze, statystyki (takie jak liczba zabójstw, śmierci itp.) i ekwipunek.
Przykładowy zapis:
json
Copy code
{
  "id": "player1",
  "nick": "Gracz1",
  "level": 10,
  "experience": 5000,
  "stats": {
    "siła": 1,
    "zręczność": 1,
    "mądrość": 1,
    "magia": 1,
    "charyzma": 1 
  },
  "inventory": {
    "weapons": [lista broni],
    "items": [lista pprzedmiotów]
  }
}
Bronie

Każde wyposażenie ma unikalne ID, nazwę, obrażenia, celność, zasięg itp.
Przykładowy zapis:
json
Copy code
{
  "id": "łuk1",
  "name": "łuk 1",
  "damage": 40,
  "accuracy": 80,
  "range": 200
}
Przedmioty

Każdy przedmiot ma unikalne ID, nazwę, opis i efekt, który może wpływać na statystyki gracza.
Przykładowy zapis:
json
Copy code
{
  "id": "medkit",
  "name": "Medkit",
  "description": "opis przedmiotu widoczny w grze",
  "effect": "opis efektu który daje predmiot"
}

informacja o questach i czy zaliczone
{
  "quests": [
    {
      "id": "quest1",
      "name": "The Lost Artifact",
      "description": "Retrieve the ancient artifact hidden deep in the temple.",
      "levelRequirement": 10,
      "reward": {
        "experience": 500,
        "gold": 1000,
        "items": ["sword", "shield"]
      },
      "objectives": [
        {
          "id": "objective1",
          "type": "kill",
          "target": "enemies",
          "goal": 10,
          "progress": 5
        },
        {
          "id": "objective2",
          "type": "collect",
          "target": "artifacts",
          "goal": 3,
          "progress": 2
        }
      ],
      "isCompleted": false
    },
    {
      "id": "quest2",
      "name": "The Cursed Forest",
      "description": "Find the source of the curse and eliminate it.",
      "levelRequirement": 15,
      "reward": {
        "experience": 800,
        "gold": 1500,
        "items": ["bow", "arrows"]
      },
      "objectives": [
        {
          "id": "objective1",
          "type": "explore",
          "target": "forest",
          "goal": 1,
          "progress": 0
        },
        {
          "id": "objective2",
          "type": "kill",
          "target": "boss",
          "goal": 1,
          "progress": 0
        }
      ],
      "isCompleted": false
    }
  ]
}






Harmonogram:
do 10 maja: 
W ramach zajęć należy przygotować:
1. Temat projektu informatycznego
2. Skład zespołu
3. Wymagania funkcjonalne i niefunkcjonalne dla projektu
4. Schemat bazy (jeśli aplikacja ma zawierać bazę).  Jeśli baza jest typu relacyjnego wtedy należy przygotować schemat ERD, uwzględniający klucze główne i relacje (klucze obce). Jeśli baza jest nierelacyjna np. w postaci JSONów, wtedy należy rozpisać jak wygląda struktura takiego elementu.
5. Technologie, w których będzie wykonany projekt
6. Repozytorium na GitHubie (jedno na projekt)
7. Harmonogram prac (daty kolejnych spotkań, do każdego spotkania należy przyporządkować, które wymagania funkcjonalne będą zaimplementowane). W przypadku projektów wieloosobowych należy do każdej pozycji umieszczonej w harmonogramie przypisać osobę, która będzie implementować ją.

W harmonogramie przedostatnie zajęcia należy zostawić na testowanie i ostatnie na prezentację.

do 17 maja:
strona menu
ustalenie szkielet scenariusza 
utworzenie projektu w unity i stwożenie dziąłającej kamery i poruszania(stania w miejscu) posatcią gracza
utwozenie listy postaci
utwożenienie podstawy świata (graficznie)
utwożenie postaci predefiniowanej 


do 24 maja:
skończenie pełnej podstawy mapy (budynki drzewa itp)
stwożenie posatci gracza
dodanie interakcji z obiektami oraz npc

skakanie/śmierć/spadanie/odradzanie/wczytywanie/zapisywanie/autozapis

do 31 maja:
ukończenie pełnego scenariusza gry
ukończenie wszystkich dialogów
dodanie do mapy contentu ( znajdzki, elementy inventory,bronie, postacie npc,handel z kupcami,esteregs)
dodanie credits
walka/teleportacja/zakończenie gry

do 6 czerwiec:
ukończenie wszystkich assetów graficznych i umieszczenie ich w grze
ukończenie pełnej graficznie mapy gry
zaimplementowanie pełnego scenariusza gry
ukończenie pełnego kodu gry

do 15 czerwiec:
testy końcowe gry
ewentualne poprawki

do 20 czerwiec:
prezentacja